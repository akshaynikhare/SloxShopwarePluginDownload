{"version":3,"file":"slox-shopware-plugin-download-teKh8Cue.js","sources":["../../../app/administration/src/core/service/api/plugin-download.api.service.js","../../../app/administration/src/core/index.js","../../../app/administration/src/module/sw-extension/component/sw-extension-card-base/sw-extension-card-base.html.twig","../../../app/administration/src/module/sw-extension/component/sw-extension-card-base/index.js"],"sourcesContent":["const { ApiService } = Shopware.Classes;\nconst { Context } = Shopware;\n\nexport default class PluginDownloadService extends ApiService {\n    constructor(httpClient, loginService, apiEndpoint = 'sloxdwn') {\n        super(httpClient, loginService, apiEndpoint);\n\n        this.name = 'sloxdwn';\n    }\n\n    /**\n     * @param {string} extensionId\n     *\n     * @returns {Promise<string|undefined>}\n     */\n    async requestDownloadToken(extensionId) {\n        const url = `/_action/${this.apiEndpoint}/${extensionId}/request-download-token`;\n        const headers = this.getBasicHeaders();\n\n        return await this.httpClient.post(url, { }, { headers }).then((res) => res?.data?.accessToken);\n    }\n\n    /**\n     * @param {string} extensionId\n     * @param {string} accessToken\n     */\n    requestDownload(extensionId, accessToken) {\n        const params = new URLSearchParams({ accessToken });\n        const url = Context.api.apiPath + `/_admin/${this.apiEndpoint}/${extensionId}/request-download?${params.toString()}`;\n\n        window.open(url, '_blank');\n    }\n}\n","import PluginDownloadService from './service/api/plugin-download.api.service';\n\nShopware.Service().register('PluginDownloadService', () => {\n    return new PluginDownloadService(\n        Shopware.Application.getContainer('init').httpClient,\n        Shopware.Service('loginService')\n    );\n});","\n{% block sw_extension_card_base_activation_switch %}\n    <section>\n        <span class=\"sw-extension-card-base__info-name\">\n            {{ extension.label }}\n        </span>\n        <span class=\"sw-extension-card-base__download-button\">\n        <br/>\n            <sw-button variant=\"action\" class=\"slox-download-button\" size=\"x-small\" \n                @click=\"requestDownload\" @keydown.enter=\"requestDownload\" \n                :is-loading=\"isDownloadLoading\" >\n                    <sw-icon class=\"slox-download-button-icon\" name=\"regular-cloud-download\" />\n                     {{ $tc('SloxDwn.downloadLabel') }}\n            </sw-button>\n        </span>\n        <!-- eslint-disable-next-line sw-deprecation-rules/no-twigjs-blocks -->\n        {% block sw_extension_card_base_info_inactive_label %}\n        <span\n            v-if=\"isInstalled && !extension.active\"\n            class=\"sw-extension-card-base__info-inactive\"\n        >\n            {{ $tc('sw-extension-store.component.sw-extension-card-base.inactiveLabel') }}\n        </span>\n        {% endblock %}\n    </section>\n{% endblock %}","import template from './sw-extension-card-base.html.twig';\nimport './sw-extension-card-base.scss';\n\nimport deDE from './snippet/de-DE';\nimport enGB from './snippet/en-GB';\n\n\nconst { Component, Context, Mixin } = Shopware;\nconst { Criteria } = Shopware.Data;\n\nShopware.Component.override('sw-extension-card-base', {\n    template,\n    inheritAttrs: false,\n\n    inject: ['PluginDownloadService'],\n    mixins: [Mixin.getByName('notification'),'sw-extension-error'],\n\n    data() {\n        return {\n            isDownloadLoading: false\n        };\n    },\n\n    methods: {\n        async requestDownload() {\n            this.isDownloadLoading = true;\n\n\n            try {\n                \n                const accessToken = await this.PluginDownloadService\n                .requestDownloadToken(this.extension.localId)\n                .catch(() => null);\n\n                if (accessToken) {\n                    this.PluginDownloadService.requestDownload(this.extension.localId, accessToken);\n                } else {\n                    this.createNotificationError({\n                        title: 'Unexpected error',\n                        message: 'Could not generate access token for extension download',\n                    });\n                }\n            } catch (e) {\n                this.showExtensionErrors(e);\n            } finally {\n                this.isDownloadLoading = false;\n            }\n        },\n    },\n    \n    snippets: {\n        'de-DE': deDE,\n        'en-GB': enGB,\n    }\n});"],"names":["ApiService","Context","PluginDownloadService","httpClient","loginService","apiEndpoint","extensionId","url","headers","res","_a","accessToken","params","template","Component","Mixin","Criteria","e","deDE","enGB"],"mappings":"AAAA,KAAM,CAAE,WAAAA,CAAU,EAAK,SAAS,QAC1B,CAAA,QAAEC,CAAO,EAAK,SAEL,MAAMC,UAA8BF,CAAW,CAC1D,YAAYG,EAAYC,EAAcC,EAAc,UAAW,CAC3D,MAAMF,EAAYC,EAAcC,CAAW,EAE3C,KAAK,KAAO,SACpB,CAOI,MAAM,qBAAqBC,EAAa,CACpC,MAAMC,EAAM,YAAY,KAAK,WAAW,IAAID,CAAW,0BACjDE,EAAU,KAAK,gBAAe,EAEpC,OAAO,MAAM,KAAK,WAAW,KAAKD,EAAK,CAAA,EAAK,CAAE,QAAAC,CAAO,CAAE,EAAE,KAAMC,GAAG,CAnB1E,IAAAC,EAmB+E,OAAAA,EAAAD,GAAA,YAAAA,EAAK,OAAL,YAAAC,EAAW,YAAW,CACrG,CAMI,gBAAgBJ,EAAaK,EAAa,CACtC,MAAMC,EAAS,IAAI,gBAAgB,CAAE,YAAAD,CAAW,CAAE,EAC5CJ,EAAMN,EAAQ,IAAI,QAAU,WAAW,KAAK,WAAW,IAAIK,CAAW,qBAAqBM,EAAO,SAAQ,CAAE,GAElH,OAAO,KAAKL,EAAK,QAAQ,CACjC,CACA,CC9BA,SAAS,QAAO,EAAG,SAAS,wBAAyB,IAC1C,IAAIL,EACP,SAAS,YAAY,aAAa,MAAM,EAAE,WAC1C,SAAS,QAAQ,cAAc,CACvC,CACC,ECPD,MAAAW,EAAe,q2BCOT,CAAE,UAAAC,EAAW,QAAAb,EAAS,MAAAc,CAAK,EAAK,SAChC,CAAE,SAAAC,CAAQ,EAAK,SAAS,KAE9B,SAAS,UAAU,SAAS,yBAA0B,CAClD,SAAAH,EACA,aAAc,GAEd,OAAQ,CAAC,uBAAuB,EAChC,OAAQ,CAACE,EAAM,UAAU,cAAc,EAAE,oBAAoB,EAE7D,MAAO,CACH,MAAO,CACH,kBAAmB,EAC/B,CACA,EAEI,QAAS,CACL,MAAM,iBAAkB,CACpB,KAAK,kBAAoB,GAGzB,GAAI,CAEA,MAAMJ,EAAc,MAAM,KAAK,sBAC9B,qBAAqB,KAAK,UAAU,OAAO,EAC3C,MAAM,IAAM,IAAI,EAEbA,EACA,KAAK,sBAAsB,gBAAgB,KAAK,UAAU,QAASA,CAAW,EAE9E,KAAK,wBAAwB,CACzB,MAAO,mBACP,QAAS,wDACjC,CAAqB,CAErB,OAAqBM,EAAG,CACR,KAAK,oBAAoBA,CAAC,CAC1C,QAAa,CACG,KAAK,kBAAoB,EACzC,CACA,CACA,EAEI,SAAU,CACN,QAASC,EACT,QAASC,CACjB,CACA,CAAC"}
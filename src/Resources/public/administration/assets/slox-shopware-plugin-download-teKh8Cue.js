const{ApiService:i}=Shopware.Classes,{Context:l}=Shopware;class c extends i{constructor(e,o,t="sloxdwn"){super(e,o,t),this.name="sloxdwn"}async requestDownloadToken(e){const o=`/_action/${this.apiEndpoint}/${e}/request-download-token`,t=this.getBasicHeaders();return await this.httpClient.post(o,{},{headers:t}).then(a=>{var s;return(s=a==null?void 0:a.data)==null?void 0:s.accessToken})}requestDownload(e,o){const t=new URLSearchParams({accessToken:o}),a=l.api.apiPath+`/_admin/${this.apiEndpoint}/${e}/request-download?${t.toString()}`;window.open(a,"_blank")}}Shopware.Service().register("PluginDownloadService",()=>new c(Shopware.Application.getContainer("init").httpClient,Shopware.Service("loginService")));const r=`{% block sw_extension_card_base_activation_switch %} <section> <span class="sw-extension-card-base__info-name"> {{ extension.label }} </span> <span class="sw-extension-card-base__download-button"> <br/> <sw-button variant="action" class="slox-download-button" size="x-small" @click="requestDownload" @keydown.enter="requestDownload" :is-loading="isDownloadLoading" > <sw-icon class="slox-download-button-icon" name="regular-cloud-download" /> {{ $tc('SloxDwn.downloadLabel') }} </sw-button> </span> {% block sw_extension_card_base_info_inactive_label %} <span v-if="isInstalled && !extension.active" class="sw-extension-card-base__info-inactive" > {{ $tc('sw-extension-store.component.sw-extension-card-base.inactiveLabel') }} </span> {% endblock %} </section> {% endblock %}`,d={downloadLabel:"Herunterladen"},w={SloxDwn:d},p={downloadLabel:"Download"},h={SloxDwn:p},{Component:x,Context:b,Mixin:u}=Shopware,{Criteria:D}=Shopware.Data;Shopware.Component.override("sw-extension-card-base",{template:r,inheritAttrs:!1,inject:["PluginDownloadService"],mixins:[u.getByName("notification"),"sw-extension-error"],data(){return{isDownloadLoading:!1}},methods:{async requestDownload(){this.isDownloadLoading=!0;try{const n=await this.PluginDownloadService.requestDownloadToken(this.extension.localId).catch(()=>null);n?this.PluginDownloadService.requestDownload(this.extension.localId,n):this.createNotificationError({title:"Unexpected error",message:"Could not generate access token for extension download"})}catch(n){this.showExtensionErrors(n)}finally{this.isDownloadLoading=!1}}},snippets:{"de-DE":w,"en-GB":h}});
//# sourceMappingURL=slox-shopware-plugin-download-teKh8Cue.js.map
